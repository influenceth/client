diff --git a/node_modules/three/build/three.module.js b/node_modules/three/build/three.module.js
index 2bcabf7..baf5c01 100644
--- a/node_modules/three/build/three.module.js
+++ b/node_modules/three/build/three.module.js
@@ -12870,7 +12870,7 @@ var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetB
 
 var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
 
-var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
+var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.003921568627451;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
 
 var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
 
@@ -20743,7 +20743,9 @@ function WebGLShadowMap( _renderer, _objects, _capabilities ) {
 
 			if ( cachedMaterial === undefined ) {
 
-				cachedMaterial = result.clone();
+				// if user explicitly passed custom material, cloning seems unnecessary
+				// and clobbers any onBeforeCompile, etc properties ignored in clone
+				cachedMaterial = customMaterial !== undefined ? result : result.clone();
 				materialsForVariant[ keyB ] = cachedMaterial;
 
 			}
diff --git a/node_modules/three/examples/jsm/csm/CSM.js b/node_modules/three/examples/jsm/csm/CSM.js
index c96e627..52580c0 100644
--- a/node_modules/three/examples/jsm/csm/CSM.js
+++ b/node_modules/three/examples/jsm/csm/CSM.js
@@ -30,6 +30,7 @@ export class CSM {
 		this.mode = data.mode || 'practical';
 		this.shadowMapSize = data.shadowMapSize || 2048;
 		this.shadowBias = data.shadowBias || 0.000001;
+		this.lightColor = data.lightColor || 0xffffff;
 		this.lightDirection = data.lightDirection || new Vector3( 1, - 1, 1 ).normalize();
 		this.lightIntensity = data.lightIntensity || 1;
 		this.lightNear = data.lightNear || 1;
@@ -54,7 +55,7 @@ export class CSM {
 
 		for ( let i = 0; i < this.cascades; i ++ ) {
 
-			const light = new DirectionalLight( 0xffffff, this.lightIntensity );
+			const light = new DirectionalLight( this.lightColor, this.lightIntensity );
 			light.castShadow = true;
 			light.shadow.mapSize.width = this.shadowMapSize;
 			light.shadow.mapSize.height = this.shadowMapSize;
@@ -239,12 +240,17 @@ export class CSM {
 
 	injectInclude() {
 		
+		// backup original shader chunks
+		ShaderChunk.lights_fragment_begin_bkp = ShaderChunk.lights_fragment_begin;
+		ShaderChunk.lights_pars_begin_bkp = ShaderChunk.lights_pars_begin;
+
+		// replace lighting shaders with CSM customizations
 		ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;
 		ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;
 
 	}
 
-	setupMaterial( material ) {
+	setupMaterial( material, preexistingOnBeforeCompile ) {
 
 		material.defines = material.defines || {};
 		material.defines.USE_CSM = 1;
@@ -260,7 +266,11 @@ export class CSM {
 		const scope = this;
 		const shaders = this.shaders;
 
+		material.userData.preexistingOnBeforeCompile = preexistingOnBeforeCompile;
 		material.onBeforeCompile = function ( shader ) {
+			if (preexistingOnBeforeCompile) {
+				preexistingOnBeforeCompile(shader);
+			}
 
 			const far = Math.min( scope.camera.far, scope.maxFar );
 			scope.getExtendedBreaks( breaksVec2 );
@@ -344,6 +354,7 @@ export class CSM {
 		for ( let i = 0; i < this.lights.length; i ++ ) {
 
 			this.parent.remove( this.lights[ i ] );
+			this.lights[ i ].dispose();
 
 		}
 
@@ -351,10 +362,18 @@ export class CSM {
 
 	dispose() {
 
+		// undo ShaderChunk rewrites
+		ShaderChunk.lights_fragment_begin = ShaderChunk.lights_fragment_begin_bkp;
+		ShaderChunk.lights_pars_begin = ShaderChunk.lights_pars_begin_bkp;
+
 		const shaders = this.shaders;
 		shaders.forEach( function ( shader, material ) {
 
-			delete material.onBeforeCompile;
+			if (material.userData.preexistingOnBeforeCompile) {
+				material.onBeforeCompile = material.userData.preexistingOnBeforeCompile;
+			} else {
+				delete material.onBeforeCompile;
+			}
 			delete material.defines.USE_CSM;
 			delete material.defines.CSM_CASCADES;
 			delete material.defines.CSM_FADE;
